#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "lmss" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5in
\topmargin 1in
\rightmargin 1.5in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Stratisd D-Bus API Reference Manual
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This work is licensed under a Creative Commons Attribution-ShareAlike 4.0
 International License.
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset

Stratisd Version 2.0.0
\end_layout

\begin_layout Date
Version 0.11.0
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset

Last modified: 01/10/2020
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Before saving this file preparatory to a commit, make sure that all insets
 are closed.
 If you are able to read this note, you haven't performed this essential
 step.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Asking Questions and Making Changes to this Document
\end_layout

\begin_layout Standard
This document can be found
\begin_inset CommandInset href
LatexCommand href
name "in the stratis-docs repo"
target "https://github.com/stratis-storage/stratis-docs/blob/master/docs/dbus/DBusAPIReference.lyx"
literal "false"

\end_inset

, and is written using \SpecialChar LyX
 2.3.3.
 Please ask any questions by opening an issue, and propose changes as pull
 requests.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This document describes the D-Bus API for the Stratis daemon.
 The D-Bus API constitutes the only public API of the Stratis daemon at
 the time of this writing.
 The public methods of the daemon's engine do not constitute part of the
 public API.
 The D-Bus API is a thin layer which receives messages on the D-Bus, processes
 them, transmits them to the Stratis engine, receives the results from the
 engine, and transmits a response on the D-Bus.
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Subsection
Technical Notes
\end_layout

\begin_layout Subsubsection
Emulating an Option type
\end_layout

\begin_layout Standard
The D-Bus specification reserves a signature code for a 
\begin_inset Quotes eld
\end_inset

maybe
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

option
\begin_inset Quotes erd
\end_inset

 type, but this type is not available
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://dbus.freedesktop.org/doc/dbus-specification.html
\end_layout

\end_inset


\end_layout

\end_inset

.
 Nonetheless, it is desirable to have a way of representing a 
\begin_inset Quotes eld
\end_inset

don't care
\begin_inset Quotes erd
\end_inset

 condition when invoking D-Bus methods.
 Certain methods accept a pair argument that mimics such a type.
 The first item is a boolean.
 If the value is false, then the pair represents None.
 If the value is true, then the pair represents Some(x) where x is the second
 item of the pair.
\end_layout

\begin_layout Section
Standard Interfaces and Methods
\end_layout

\begin_layout Subsection
org.freedesktop.dbus.ObjectManager interface
\end_layout

\begin_layout Standard
The top level D-Bus object implements the org.freedesktop.dbus.ObjectManager
 interface.
 This interface defines the GetManagedObjects() method, which returns a
 view of the objects that the D-Bus layer has in its tree.
 This view constitutes a summary of the state of the pools, devices, and
 filesystems that Stratis manages.
 The objects are identified primarily by their D-Bus object paths.
 However, depending on the interface which an object supports it may also
 support certain identifying properties.
 For example, all objects that represent pools support an interface which
 implements a Name and a Uuid property which may be used by the client to
 identify a pool.
\end_layout

\begin_layout Standard
In invoking methods, or obtaining the values of properties, the client must
 identify existing objects by means of their object paths, either implicitly
 by invoking a method on an object constructed from an object path, or explicitl
y, by passing object paths as arguments to a method.
 For example, the API's DestroyPool() method requires two object paths:
\end_layout

\begin_layout Itemize
the object path of the Manager object, on which to invoke the DestroyPool
 method
\end_layout

\begin_layout Itemize
the object path of the pool object, which is passed as an argument to the
 DestroyPool method
\end_layout

\begin_layout Standard
It is expected that the client will identify the object path of the pool
 object by locating it using its Name or Uuid property.
\end_layout

\begin_layout Subsection
org.freedesktop.dbus.Introspectable
\end_layout

\begin_layout Standard
All objects support the org.freedesktop.dbus.Introspectable interface.
 This interface has one method, Introspect(), which returns an XML description
 of the object's interfaces, methods, and properties.
\end_layout

\begin_layout Section
Stratisd Interfaces and Methods
\end_layout

\begin_layout Standard
Each kind of object implements an identifying interface, i.e., pools implement
 a pool interface, filesystems implement a filesystem interface, etc.
 There is a top level manager interface that implements management tasks.
 The following is a description of the interfaces and their methods and
 properties.
 Some more detailed information can be obtained from the introspection informati
on that can be queried for each object, including the signatures of all
 methods and properties.
 
\end_layout

\begin_layout Paragraph
Idempotency
\end_layout

\begin_layout Standard
It is intended that all operations that can be requested via the D-Bus API
 be idempotent.
 By this is meant that if an operation is requested repeatedly, and there
 are no intervening actions, then the operation should succeed every time,
 or it should fail every time.
 Since the return values may encode information about actions taken these
 may differ between different invocations.
 However if an error is returned that should always be the same error.
 Lack of idempotency as defined here constitutes a bug.
\end_layout

\begin_layout Subsection
Standard Interfaces
\end_layout

\begin_layout Paragraph
Structure of the Return Value
\end_layout

\begin_layout Standard
All methods return a return code and an accompanying message, with type
 signature 
\begin_inset Quotes eld
\end_inset

qs
\begin_inset Quotes erd
\end_inset

, and may also return data.
 If a method does return data, then the data is the first element in a triple,
 followed by the return code and message.
 The data may be a 
\begin_inset CommandInset href
LatexCommand href
name "container type"
target "https://dbus.freedesktop.org/doc/dbus-specification.html#container-types"
literal "false"

\end_inset

 such as a struct or an array.
 Otherwise, if the method returns no data, the returned value is just a
 pair of the return code and message.
\end_layout

\begin_layout Paragraph
Duplicate Device Nodes in Method Arguments
\end_layout

\begin_layout Standard
Some methods expect an array of device nodes as an argument.
 It is not considered an error if the array contains duplicate items; the
 items are reduced to a set.
 The order in which the devices are processed, for example, are added to
 an existing pool, is not guaranteed to be the same as the order in which
 they are passed as arguments.
\end_layout

\begin_layout Subsubsection
Manager interface
\end_layout

\begin_layout Standard
The Manager interface is the top level interface.
 It manages the creation and destruction of pools and also exports various
 global properties.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout Description
ConfigureSimulator This method is solely used to configure the simulator
 engine.
 Invoking it on the real engine is a no-op.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
denominator the denominator of the fraction that determines the frequency
 of unusual occurences, generally failures.
 Signature: u.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: qs.
\end_layout

\end_deeper
\begin_layout Description
CreatePool This method creates a single pool with the specified name and
 blockdevs.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
name the name of the pool.
 Signature: s.
\end_layout

\begin_layout Description
redundancy the redundancy specification for the pool.
 Signature: (bq).
 Note that redundancy is an Option argument.
\end_layout

\begin_layout Description
devices device nodes of devices to form the pool.
 Signature: as.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (b(oao))qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if a pool was created, otherwise false.
 Signature: b.
\end_layout

\begin_layout Enumerate
The result of the creation action, default values if no pool was created.
 Signature: (oao).
\end_layout

\begin_deeper
\begin_layout Enumerate
The object path of the created pool.
 Signature: o.
\end_layout

\begin_layout Enumerate
The object paths of all the block devices in the pool.
 Signature: ao.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Description
DestroyPool This method destroys the specified pool.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
pool_object_path the object path of the pool to destroy.
 Signature: o.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bs)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if the pool was destroyed, otherwise false.
 Signature: b.
\end_layout

\begin_layout Enumerate
The UUID of the pool destroyed, or a default value if no action was taken.
 Signature: s.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Propeties
\end_layout

\begin_layout Description
Version The current stratisd version.
 Signature: sqs.
\end_layout

\begin_layout Subsubsection
pool interface
\end_layout

\begin_layout Standard
The pool interface manages the devices and filesystems within a pool.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout Description
AddCacheDevs This method allows additional cache devices to be added to
 the pool after it is created.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
devices this argument has the same meaning as the device argument of CreatePool.
 Signature: as.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bao)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if any cache devices were added, otherwise false.
 Signature: b.
\end_layout

\begin_layout Enumerate
The object paths of the newly added cache devices.
 Signature: ao.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
AddDataDevs This method allows additional data devices to be added to the
 pool after it is created.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
devices this argument has the same meaning as the device argument of CreatePool.
 Signature: as.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bao)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if any data devices were added, otherwise false.
 Signature: b.
\end_layout

\begin_layout Enumerate
The object paths of the newly added data devices.
 Signature: ao.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
CreateFilesystems This method allows creating multiple filesystems, specified
 by name, on a pool.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
specs The specification for each filesystem to be created, currently just
 a name.
 Signature: as.
\end_layout

\end_deeper
\begin_layout Description
Returns Signature: (ba(os))qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if any filesystem was added, otherwise false.
 Signature: b.
\end_layout

\begin_layout Enumerate
An array of object path/name pairs for each filesystem created.
 Signature: a(os).
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
DestroyFilesystems This method allows destroying multiple filesystems.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
filesystems the object paths of the filesystems to be destroyed.
 Signature: ao.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bas)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if any filesystems were destroyed, otherwise False.
 Signature: b.
\end_layout

\begin_layout Enumerate
An array of the UUIDs of the filesystems destroyed.
 Signature: as.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
SetName This allows setting the name of the pool.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
new_name The name to set.
 Signature: s.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bs)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if an action was taken, otherwise false.
 If the new name is the same as the old name, then no action is considered
 to have been taken.
 Signature: b.
\end_layout

\begin_layout Enumerate
The UUID of the filesystem or a default UUID if no change was made.
 Signature: s.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
SnapshotFilesystem This method allows a snapshot to be created from an existing
 filesystem
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
origin the object path of the source filesystem of the snapshot.
 Signature: o.
\end_layout

\begin_layout Description
snapshot_name the name of the newly created snapshot.
 Signature: s.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bo)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if a new snapshot was created, otherwise false.
 Signature: b.
\end_layout

\begin_layout Enumerate
The object path of the newly created snapshot.
 Signature: o.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Properties
\end_layout

\begin_layout Description
Encrypted Whether or not the pool is encrypted.
 Signature: b.
 Introduced in D-Bus version: 2-r1.
\end_layout

\begin_layout Description
Name The name of the pool.
 Signature: s.
\end_layout

\begin_layout Description
Uuid The UUID of the pool.
 This property is constant.
 Signature: s.
\end_layout

\begin_layout Subsubsection
filesystem interface
\end_layout

\begin_layout Standard
The fileystem interface manages the properties of individual filesystems.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout Description
SetName This allows setting the name of the filesystem.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
name The name to set.
 Signature: s.
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bs)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if an action was taken, otherwise false.
 If the new name is the same as the old name, then no action is considered
 to have been taken.
 Signature: b.
\end_layout

\begin_layout Enumerate
The UUID of the filesystem, or a default UUID if no change was made.
 Signature: s.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Properties
\end_layout

\begin_layout Description
Devnode The device node of the filesystem's corresponding thin device.
 This property is constant.
 Signature: s.
\end_layout

\begin_layout Description
Name The name of the filesystem.
 Signature: s.
\end_layout

\begin_layout Description
Pool The object path of the parent pool.
 This property is constant.
 Signature: o.
\end_layout

\begin_layout Description
Uuid The UUID of the filesystem.
 This property is constant.
 Signature: s.
\end_layout

\begin_layout Subsubsection
blockdev interface
\end_layout

\begin_layout Standard
The blockdev interface manages the properties of individual blockdevs.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout Description
SetUserInfo This allows setting identifying information for the blockdev
 by the user.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
id The free-form information to set.
 Signature: (bs).
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bs)qs.
\end_layout

\begin_deeper
\begin_layout Enumerate
True if an action was taken, otherwise false.
 If the new information is the same as the old information, then no action
 is considered to have been taken.
 Signature: b.
\end_layout

\begin_layout Enumerate
The UUID of the blockdev, or a default UUID if no change was made.
 Signature: s.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Properties
\end_layout

\begin_layout Description
Devnode The device node of the blockdev.
 This property is constant.
 Signature: s.
\end_layout

\begin_layout Description
HardwareInfo The hardware-derived ID for this blockdev.
 May be empty.
 This property is constant.
 Signature: (bs).
\end_layout

\begin_layout Description
InitializationTime
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 Time that Stratis initialized this blockdev, in ISO 8601 text format (UTC).

\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 Signature: t.
\end_layout

\begin_layout Description
Pool The object path of the parent pool.
 This property is constant.
 Signature: o.
\end_layout

\begin_layout Description
Tier The tier the blockdev is in, either Data(0) or Cache (1).
 This property is constant.
 Signature: q.
\end_layout

\begin_layout Description
UserInfo The user-defined string associated with this blockdev.
 May be empty.
 Signature: (bs).
\end_layout

\begin_layout Description
Uuid The UUID of the blockdev.
 This property is constant.
 Signature: s.
\end_layout

\begin_layout Subsubsection
Report interface
\end_layout

\begin_layout Standard
The Report interface is an unstable interface for querying internal stratisd
 data structure state.
 It provides reports as JSON, and while the reports can be parsed programmatical
ly, the names and schemas of provided reports do not follow the semantic
 versioning scheme that the rest of the D-Bus API does.
 The reports are subject to change at any time.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout Description
GetReport This method allows fetching a report by name.
 If a report by the supplied name does not exist, an error is returned.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
name: The name of the report as a string
\end_layout

\end_deeper
\begin_layout Description
Returns: Signature: (bs)qs
\end_layout

\begin_deeper
\begin_layout Enumerate
True if the report name requested is a valid report name and JSON was returned
 successfully.
 Signature: b.
\end_layout

\begin_layout Enumerate
A valid JSON string representing the report requested.
 Signature: s.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Non-standard Interfaces
\end_layout

\begin_layout Subsubsection
FetchProperties interface
\end_layout

\begin_layout Standard
The FetchProperties interface is a generic interface supported by filesystems,
 pools, and blockdevs.
 It supplies two methods, which have the same return signature: a{s(bv)}.
 The return value is a table mapping string keys to properties of a filesystem,
 pool, or blockdev.
 Each value is a tuple of a boolean and a variant.
 The boolean indicates whether the second element of the pair represents
 the value requested or not.
 If the first element of the tuple is false, the second element is a string
 containing an error message indicating the cause of the failure to obtain
 the value.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout Description
GetAllProperties This method allows getting all properties of the particular
 pool, filesystem or blockdev.
\end_layout

\begin_deeper
\begin_layout Description
Arguments: None.
\end_layout

\end_deeper
\begin_layout Description
GetProperties This method allows getting properties specified by a list
 of keys passed as an argument.
 If a key is unrecognized, there is no corresponding entry in the returned
 table.
\end_layout

\begin_deeper
\begin_layout Description
Arguments:
\end_layout

\begin_deeper
\begin_layout Description
properties: The list of string keys specifying the names of the properties
 requested.
 Signature: as.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Pools, filesystem, and blockdevs each support a different set of properties.
 The properties supported for each are:
\end_layout

\begin_layout Description
blockdev
\end_layout

\begin_deeper
\begin_layout Description
TotalPhysicalSize The total physical size of the blockdev in bytes.
 Signature: s.
\end_layout

\end_deeper
\begin_layout Description
filesystem
\end_layout

\begin_deeper
\begin_layout Description
Used The bytes used by this filesystem.
 Signature: s.
\end_layout

\end_deeper
\begin_layout Description
pool
\end_layout

\begin_deeper
\begin_layout Description
HasCache Whether or not the pool has a cache.
 Signature: b.
 Introduced in D-Bus version: 2-r1.
\end_layout

\begin_layout Description
TotalPhysicalSize The total physical size of the pool in bytes.
 Signature: s.
\end_layout

\begin_layout Description
TotalPhysicalUsed The total amount of physical space already used in the
 pool.
 Signature: s
\end_layout

\end_deeper
\begin_layout Section
Stratis interface versioning
\end_layout

\begin_layout Subsection
Versioning scheme
\end_layout

\begin_layout Standard
stratisd implements a versioned D-Bus interface.
\end_layout

\begin_layout Subsubsection
Interface major versions
\end_layout

\begin_layout Standard
The versioning scheme is currently included in the bus name (for example,
 org.storage.stratis2) and all of the interface names (org.storage.stratis2.pool,
 org.storage.stratis2.filesystem, and so on).
 The interface version number corresponds to the major version number of
 stratisd.
\end_layout

\begin_layout Subsubsection
Interface minor versions
\end_layout

\begin_layout Standard
The proposed scheme also leaves room for supporting two interfaces at once.
 This would arise if enhancements need to be made in a minor release version
 to support new arguments in a method call or a new method altogether.
 For accessing minor release versions of the interface, two things are required.
 First, the minor version of stratisd must be at least that specified in
 the interface.
 Second, the interface must be accessed by appending the letter 'r' and
 the minor version number after a period to the end of the interface name.
 For example, a change to the filesystem interface at version 2.4.0 would
 be accessed through org.storage.stratis2.filesystem.r4.
 This interface would provide the new feature or change to the interface,
 maintaining backwards compatibility through org.storage.stratis2.filesystem.
\end_layout

\begin_layout Subsection
Interface breaking changes
\end_layout

\begin_layout Standard
When upgrading stratisd to a version with breaking changes, this should
 work automatically when installing from packages.
 If installing from source, there are some considerations when updating.
 Because stratisd uses the system bus in D-Bus, D-Bus will only allow stratis
 to bind to the new interface name if the D-Bus policy file allowing this
 is updated.
 When using packaging, this is typically installed at the location /usr/share/db
us-1/system.d/stratisd.conf on your filesystem or another path supported by
 D-Bus when searching for policy files.
 When stratis releases version 3.0.0, all instances of org.storage.stratis2
 should be replaced with org.storage.stratis3 or else stratis will fail to
 communicate using the CLI or the programmatic API over D-Bus.
\end_layout

\end_body
\end_document
