#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties false
\origin unavailable
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "beraserif" "default"
\font_sans "lmss" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5in
\topmargin 1in
\rightmargin 1.5in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Stratis Software Design: Version 0.9.1
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This work is licensed under a Creative Commons Attribution-ShareAlike 4.0
 International License.
\end_layout

\end_inset


\end_layout

\begin_layout Author
Andy Grover 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

<agrover@redhat.com>
\end_layout

\end_inset


\end_layout

\begin_layout Date
Last modified: 05/30/2018
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Before saving this file preparatory to a commit, make sure that all insets
 are closed.
 If you are able to read this note, you haven't performed this essential
 step.
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Asking Questions and Making Changes to this Document
\end_layout

\begin_layout Standard
This document can be found 
\begin_inset CommandInset href
LatexCommand href
name "in the stratis-docs repo"
target "https://github.com/stratis-storage/stratis-docs/blob/master/docs/design/StratisSoftwareDesign.lyx"
literal "false"

\end_inset

, and is written using \SpecialChar LyX
 2.2.2.
 Please ask any questions by opening an issue, and propose changes as pull
 requests.
\end_layout

\begin_layout Section*
Executive Summary
\end_layout

\begin_layout Standard
Stratis is a new tool that meets the needs of Red Hat Enterprise Linux (RHEL)
 users (among others) calling for an easily configured, tightly integrated
 solution for storage that works within the existing Linux storage management
 stack.
 To achieve this, Stratis prioritizes a straightforward command-line experience,
 a rich API, and a fully automated, externally-opaque approach to storage
 management.
 It builds upon elements of the existing storage stack as much as possible,
 to enable delivery within 1-2 years.
 Specifically, Stratis initially plans to use device-mapper and the XFS
 filesystem, but may incorporate other technology in the future.
\end_layout

\begin_layout Part
Background
\end_layout

\begin_layout Section
Problem Statement
\end_layout

\begin_layout Standard
Linux has gained many storage-related features over the years, but each
 of these features has required the user to manage the configuration of
 these features in a layered, additive manner.
 Genuinely new and useful features such as thin provisioning, RAID, and
 multipath are dependent on the user correctly configuring many different
 layers via different tools to achieve a complete result.
 Furthermore, since each layer's configuration tool only has a command-line
 interface (CLI), higher-level management tools must each construct input
 and parse the human-oriented output for each these layers' CLI.
 This causes a waste of effort and opportunity for bugs, as each higher-level
 tool builds its own internal API for the feature on top of the lower level
 tool's CLI.
\end_layout

\begin_layout Subsection
Goal: Bring advanced features to users in a simpler form
\end_layout

\begin_layout Standard
Linux storage features are modular and stackable.
 This promotes flexibility and allows independent development efforts, but
 leads to a huge number of possible configurations.
 This requires the user manage the stack because there's not enough commonality
 to enable effective automation.
\end_layout

\begin_layout Standard
But really, there 
\emph on
is
\emph default
 a single configuration that can work for most use cases.
 By assuming a fixed layering of storage features (some perhaps optional),
 we enable software to effectively manage these on behalf of the user.
\end_layout

\begin_layout Standard
Automated management then leads to less administrative burden placed on
 the user.
 The user still specifies resources, desired features, and results – what
 hardware resources to use, what features to enable, how storage should
 be logically presented – using a smaller number of concepts with well-defined
 relations.
 Software manages the rest, and handles most runtime issues without user
 involvement.
\end_layout

\begin_layout Subsection
Proposal: Implement a hybrid Volume Managing Filesystem
\end_layout

\begin_layout Standard
In the past ten years, 
\emph on
volume-managing filesystems
\emph default
 (VMFs) such as ZFS and Btrfs have come into vogue and gained users, after
 being previously available only on other UNIX-based operating systems.
 These incorporate what would be handled by multiple tools under traditional
 Linux into a single tool.
 Redundancy, thin provisioning, volume management, and filesystems become
 features within a single comprehensive, consistent configuration system.
 Where a traditional Linux storage stack exposes the layers of block devices
 to the user to manage, VMFs hide everything in a 
\emph on
pool
\emph default
.
 The user puts raw storage in the pool, the VMF manages the storage in the
 pool, providing the features the user wants, and allows the user to create
 filesystems from the pool without being concerned with the details.
\end_layout

\begin_layout Standard
Unfortunately, existing VMFs aren't easily used on enterprise Linux distribution
s like RHEL.
 ZFS isn't an option RHEL can embrace due to licensing, Ubuntu notwithstanding.
 Btrfs has no licensing issues, but maintaining up-to-date support for in
 it in enterprise kernels proved difficult.
\end_layout

\begin_layout Standard
We can see from the many developer-years of effort that have gone into these
 two projects that writing a VMF is a tremendous, time-consuming undertaking.
 We also can hear our users demanding their features and ease of use.
\end_layout

\begin_layout Standard
Rather than writing a new VMF from scratch, Stratis proposes to satisfy
 VMF-like requirements by managing existing technologies on behalf of the
 user, so that users can manage their storage using high-level concepts
 like 
\begin_inset Quotes eld
\end_inset

pool
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

filesystem
\begin_inset Quotes erd
\end_inset

, and remain unconcerned with the more complex details under the covers.
\end_layout

\begin_layout Standard
This is also a chance to learn from the benefits and shortcomings of existing
 solutions.
 We should not just copy ZFS.
 ZFS is now fifteen years old and the storage landscape has changed since
 its design.
 We seek to satisfy the same needs that ZFS does, but also integrate more
 tightly into today's increasingly automated storage management solutions
 that span the data center as well as the local machine.
 This is made possible by a hybrid, userspace-based approach.
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Enumerate

\emph on
Make features easier to use in combination with each other
\emph default
: thin provisioning, snapshots, integrity, redundancy, multipath, encryption,
 hardware reconfiguration, monitoring, and a caching tier
\end_layout

\begin_layout Enumerate
Simple and comprehensive command-line interface
\end_layout

\begin_deeper
\begin_layout Enumerate
Simple
\end_layout

\begin_deeper
\begin_layout Enumerate
Single way to do things
\end_layout

\begin_layout Enumerate
Do not expose internal implementation details.
 Gives Stratis more implementation freedom, and of little value since internals
 are too complex to make manual user repairs practical
\end_layout

\begin_layout Enumerate
User typically will not use on a daily basis
\end_layout

\begin_deeper
\begin_layout Enumerate
Consistent commands that a user can guess at, and probably be right
\end_layout

\begin_layout Enumerate
Require explicitness from the user for potentially data-losing operations,
 such as giving a 
\begin_inset Quotes eld
\end_inset

–force
\begin_inset Quotes erd
\end_inset

 option.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Comprehensive
\end_layout

\begin_deeper
\begin_layout Enumerate
User must master only one tool
\end_layout

\begin_layout Enumerate
Helps user learn: if task not possible through tool, it must not be worth
 doing (or a good idea)
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Programmatic language-neutral API for higher-level management tool integration
\end_layout

\begin_deeper
\begin_layout Enumerate
A clear next step for users after hitting the limitations of scripting the
 CLI
\end_layout

\begin_layout Enumerate
Encourages tight integration and use of all features by higher-level tools
\end_layout

\end_deeper
\begin_layout Enumerate
Event-driven monitoring and alerts
\end_layout

\begin_deeper
\begin_layout Enumerate
Monitoring and alert messages expressed in terms of Stratis user-visible
 simple concepts, not implementation details
\end_layout

\begin_layout Enumerate
Low CPU/memory overhead to monitoring
\end_layout

\begin_layout Enumerate
Only alert when action really is needed
\end_layout

\begin_layout Enumerate
Fail gracefully if alerts are unheeded
\end_layout

\end_deeper
\begin_layout Enumerate
Eliminate manual resizing of filesystems
\end_layout

\begin_deeper
\begin_layout Enumerate
Numerous problem reports throughout the years indicate that resizing filesystems
 is an area where users feel unease, due to potential data loss if a mistake
 is made.
 No real reason to require the user do this any more.
\end_layout

\begin_layout Enumerate
Simpler for DevOps
\end_layout

\begin_layout Enumerate
Makes storage 
\begin_inset Quotes eld
\end_inset

demand-allocated
\begin_inset Quotes erd
\end_inset

, similar to virtual memory.
 Current technology allows us to manage a filesystem's actual usage up (growfs)
 or down (thin provisioning).
\end_layout

\end_deeper
\begin_layout Enumerate
Initrd-capable
\end_layout

\begin_deeper
\begin_layout Enumerate
Allows root fs, all other filesystems except /boot to use Stratis.
 Needed for ease of use
\end_layout

\begin_layout Enumerate
Limited environment – no Python or DBus – but can use device-mapper
\end_layout

\end_deeper
\begin_layout Enumerate
Bootable (planned – see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Stratis-version-4.0"

\end_inset

)
\end_layout

\begin_deeper
\begin_layout Enumerate
Feels like a 
\begin_inset Quotes eld
\end_inset

real
\begin_inset Quotes erd
\end_inset

 filesystem if no secondary filesystem is needed for boot
\end_layout

\begin_layout Enumerate
Enables Stratis features to be used by system image, e.g.
 booting from a snapshot, and allowing /boot to grow
\end_layout

\begin_layout Enumerate
Requires explicit support in bootloader (Grub2)
\end_layout

\begin_layout Enumerate
device-mapper not available
\end_layout

\end_deeper
\begin_layout Enumerate
Adaptable to emerging storage technologies
\end_layout

\begin_deeper
\begin_layout Enumerate
Persistent memory
\end_layout

\begin_deeper
\begin_layout Enumerate
Block-appearing pmem can be used by Stratis
\end_layout

\begin_layout Enumerate
byte-addressible pmem see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Stratis-version-4.0"

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Implementable in 1-2 years
\end_layout

\begin_deeper
\begin_layout Enumerate
We're already behind, waiting another 10 years isn't an option
\end_layout

\end_deeper
\begin_layout Part
Solution Overview
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Stratis is a local storage solution that lets multiple logical filesystems
 share a pool of storage that is allocated from one or more block devices.
 Instead of an entirely in-kernel approach like ZFS or Btrfs, Stratis uses
 a hybrid user/kernel approach that builds upon existing block capabilities
 like device-mapper, existing filesystem capabilities like XFS, and a user
 space daemon for monitoring and control.
\end_layout

\begin_layout Standard
The goal of Stratis is to provide the conceptual simplicity of volume-managing
 filesystems, and surpass them in areas such as monitoring and notification,
 automatic reconfiguration, and integration with higher-level storage management
 frameworks.
\end_layout

\begin_layout Section
Stratis and the Linux storage stack
\end_layout

\begin_layout Standard
Stratis simplifies many aspects of local storage provisioning and configuration.
 This, along with its API, would let projects dependent on configuring local
 storage do so much more easily.
\end_layout

\begin_layout Standard
For example, installing the OS to a Stratis pool using Anaconda.
 After selecting the disks to use for the pool, the first benefit would
 be the complex flow around sizing of filesystems could be omitted.
 Second, since Stratis has an API, Anaconda could use it directly, instead
 of needing work in Blivet to build an API on top of command line tools.
\end_layout

\begin_layout Standard
Other management tools like Cockpit, virtualization products like RHEV,
 or container products like Atomic would find it much simpler and less error-pro
ne to use storage and snapshots with Stratis, for the same two reasons:
 don't need to worry about per-filesystem sizing (only that the pool has
 enough 
\begin_inset Quotes eld
\end_inset

backing store
\begin_inset Quotes erd
\end_inset

); and the API, which allows better tool-to-tool integration than using
 CLI programmatically.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename stratis-interactions.svg
	scale 80

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Stratis in the Linux Storage Management Stack
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are existing libraries that handle CLI-to-API for both Anaconda and
 Cockpit.
 These could be extended to support Stratis, or not.
\end_layout

\begin_layout Section
Conceptual Model
\end_layout

\begin_layout Subsection
Blockdevs, pools, and filesystems
\end_layout

\begin_layout Standard
Stratis’s conceptual model consists of 
\emph on
blockdevs
\emph default
, 
\emph on
pools
\emph default
, and 
\emph on
filesystems
\emph default
.
 A pool is created from one or more blockdevs (block devices), and then
 filesystems are created from the pool.
 Filesystems are mountable hierarchical collections of files that allocate
 backing storage from the pool as it is needed.
 The key difference between a Stratis filesystem and a conventional Unix
 filesystem is that Stratis filesystem sizing and maintenance are not managed
 by the user, but by Stratis.
\end_layout

\begin_layout Subsection
Attributes and features of a pool
\end_layout

\begin_layout Standard
A pool is created with an initial set of one or more blockdevs.
 Blockdevs may also be added after the pool is created.
 Blockdevs may eventually be removable from a pool, if certain preparations
 are performed and conditions are met.
 The pool's primary collection of blockdevs is called the 
\emph on
data tier
\emph default
.
\end_layout

\begin_layout Standard
A pool also optionally has a 
\emph on
cache tier
\emph default
 that uses a separate collection of faster blockdevs to improve performance
 instead of increase the pool's capacity.
\end_layout

\begin_layout Standard
Both tiers have their own independent data redundancy level.
 which may be none, raid1, raid5, raid6, or raid10 (the default is none).
\end_layout

\begin_layout Standard
Since a single system may have multiple pools, each pool has a name, as
 does each filesystem within a pool.
 These are both settable by the user.
 Blockdevs, pools, and filesystems also have UUIDs, which are not settable
 by the user.
\end_layout

\begin_layout Standard
Stratis supports large numbers of blockdevs and up to 
\begin_inset Formula $2^{24}$
\end_inset

filesystems per pool.
 However, practical limits on these values may compel users to restrict
 themselves to smaller numbers of blockdevs and filesystems.
\end_layout

\begin_layout Standard
A new filesystem is either a new empty filesystem or a snapshot of an existing
 filesystem within the pool.
 Stratis currently does not distinguish between snapshots and filesystems.
 (May change.)
\end_layout

\begin_layout Section
Scalability and Performance Considerations
\end_layout

\begin_layout Standard
Stratis doesn't optimize performance within its data tier, instead focusing
 there on flexibility and integrity.
 Improved performance is the job of caching tier, or perhaps building the
 pool using blockdevs with higher IOPs, such as SSDs.
\end_layout

\begin_layout Part
\begin_inset CommandInset label
LatexCommand label
name "part:Implementation"

\end_inset

Implementation
\end_layout

\begin_layout Section
Software Components
\end_layout

\begin_layout Standard
Stratis consists of a command-line tool,
\emph on
 stratis
\emph default
, and a service,
\emph on
 stratisd
\emph default
.
\end_layout

\begin_layout Standard
stratis implements the command-line interface, and converts commands into
 D-Bus API calls to stratisd.
\end_layout

\begin_layout Standard
stratisd implements the D-Bus interface, and manages and monitors Stratis
 internal pool blockdevs, as described below.
 It is started by the system and continues to run as long as Stratis pools
 or blockdevs are present in the system.
\end_layout

\begin_layout Section
User Experience
\end_layout

\begin_layout Standard
Stratis has a command-line tool that enables the administrator to create
 a Stratis pool from one or more blockdevs, and then allocate filesystems
 from the pool.
\end_layout

\begin_layout Standard
See reference implementation at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/stratis-storage/stratis-cli
\end_layout

\end_inset

 for the most up-to-date status of the CLI design.
\end_layout

\begin_layout Standard
This component is not required to be installed, in cases such as an appliance
 where a higher-level application such as Cockpit or Ansible uses the D-Bus
 API directly.
\end_layout

\begin_layout Subsection
Known shortcomings
\end_layout

\begin_layout Standard
Stratis' goal is to hide the complexity of its implementation from the user,
 but by using a reuse/layering approach to its implementation, there will
 be places where Stratis' implementation details will peek through.
 This could cause user confusion, and also could threaten Stratis integrity
 if the user makes changes.
\end_layout

\begin_layout Itemize
For Stratis filesystems, 'df' will report the current used and free sizes
 as seen and reported by XFS.
 This is not useful information, because the filesystem's actual storage
 usage will be less due to thin provisioning, and also because Stratis will
 automatically grow the filesystem if it nears XFS's currently sized capacity.
\end_layout

\begin_layout Itemize
Users should not try to reformat or reconfigure XFS filesystems that are
 managed by Stratis.
 Stratis has no way to enforce this or warn the user to avoid this, other
 than in the documentation.
\end_layout

\begin_layout Itemize
Stratis will use many device-mapper devices, which will show up in `dmsetup`
 listings and /proc/partitions.
 Similarly, `lsblk` output on a Stratis system will reflect Stratis' internal
 workings and layers.
\end_layout

\begin_layout Itemize
Stratis requires a userspace daemon, which must remain running at all times
 for proper monitoring and pool maintenance.
\end_layout

\begin_layout Section
D-Bus Programmatic API
\end_layout

\begin_layout Standard
The Stratis service process exposes a D-Bus interface, for other programs
 to integrate support for Stratis.
 This is considered the primary Stratis interface.
 The command-line tool uses the D-Bus API.
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
The D-Bus API is part of stratisd.
 It is a thin layer that receives messages on the D-Bus, processes them,
 transmits them to the Stratis engine, receives the results from the engine,
 and returns the result to the invoker of the API.
 When processing method calls, its responsibilities are confined to:
\end_layout

\begin_layout Itemize
Receiving arguments and verifying that they conform to the signature of
 the invoked method.
\end_layout

\begin_layout Itemize
Transforming method arguments received on the D-Bus to arguments of the
 appropriate type to be passed to engine methods.
\end_layout

\begin_layout Itemize
Converting tuple arguments used to represent non-mandatory arguments to
 values which inhabit the Rust Option type.
\end_layout

\begin_layout Itemize
Invoking the appropriate engine methods and capturing their return values.
\end_layout

\begin_layout Itemize
Marshalling the appropriate return values to place on the D-Bus along with
 the return code and message.
\end_layout

\begin_layout Itemize
Adding or removing objects from the D-Bus tree.
\end_layout

\begin_layout Standard
The D-Bus API is implemented using the dbus-rs library
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/diwic/dbus-rs
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The Stratisd D-Bus API Reference Manual contains a description of the API.
\end_layout

\begin_layout Subsection
D-Bus Access Control
\end_layout

\begin_layout Subsubsection
Security Policy
\end_layout

\begin_layout Standard
Stratis D-Bus methods require root permissions.
\end_layout

\begin_layout Subsubsection
Prevent Spoofing
\end_layout

\begin_layout Section
Internals
\end_layout

\begin_layout Standard
Stratis internals aim to be opaque to the user.
 This allows its implementation maximum flexibility to do whatever it needs
 in Stratis version 1, as well as to be extended in later versions without
 violating any user-visible expectations.
\end_layout

\begin_layout Subsection
Data Tier Requirements
\end_layout

\begin_layout Standard
The data tier of Stratis must manage blockdevs on behalf of the user to
 provide the following:
\end_layout

\begin_layout Enumerate
Managed filesystems that consume only as much space as the files they contain
\end_layout

\begin_layout Enumerate
Fast snapshots of existing filesystems
\end_layout

\begin_layout Enumerate
The ability to add (and eventually remove) individual blockdevs to grow
 the available space available to filesystems
\end_layout

\begin_layout Enumerate
User-selectable redundancy level (per-pool granularity)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Integrity checking
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Encryption
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data Tier
\end_layout

\begin_layout Standard
The data tier achieves these requirements by layering device-mapper (DM)
 devices on top of the pool's blockdevs.
 The topmost layer consists of thin devices allocated from a thinpool.
 Stratis initializes these thin devices with a filesystem, and manages the
 DM devices and filesystems to meet the above requirements.
\end_layout

\begin_layout Subsubsection
Layer 0: Blockdevs
\end_layout

\begin_layout Standard
This layer is responsible for discovering existing blockdevs in a pool,
 initializing and labeling new blockdevs unambiguously as part of the pool,
 setting up any disk-specific parameters, and storing pool metadata on each
 blockdev.
 The minimum blockdev size Stratis will use is 1 GiB.
\end_layout

\begin_layout Standard

\emph on
Blockdev states
\end_layout

\begin_layout Standard
\align left
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="40col%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
State
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
present
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
good
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
available
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in use
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Missing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device is listed as a member of the pool but not found
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device is found but cannot be used
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spare
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device is usable but held in reserve
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not-in-use
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device is usable but does not contain data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In-use
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device is in use and contains data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Layer 1: Integrity (optional)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This layer uses the dm-integrity target to enable the detection of incorrect
 data as it is read, by using extra space to record the results of checksum/hash
 functions on the data blocks, and then comparing the results with what
 the blockdev actually returned.
 This will enable Stratis to detect data corruption when the pool is non-redunda
nt, and to repair the corruption when the pool is redundant.
 It should also be possible to use DIF
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See https://oss.oracle.com/projects/data-integrity/
\end_layout

\end_inset

 information if present.
\end_layout

\begin_layout Subsubsection
Layer 2: Redundancy (optional)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A Stratis pool may optionally be configured to spread data across multiple
 physical disks, so that the loss of any one disk does not cause data loss.
 Stratis uses conventional RAID technology (1, 5, 6, 10, 1E
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See ‘linux/Documentation/device-mapper/dm-raid.txt’ for more info
\end_layout

\end_inset

) as specified, and converts Layer 0 blockdevs into a smaller-sized amount
 of storage with the specified raid properties.
\end_layout

\begin_layout Standard
Since Stratis supports more blockdevs than are RAID-able (generally 8 or
 fewer is best for a raidset
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
More are supported by DM, but too many increase the likelihood of individual
 failures.
\end_layout

\end_inset

), and differently-sized blockdevs, a redundant Stratis pool may contain
 multiple raid sets (all of the same global type).
 Depending on layout, there may be some amount of space in a pool’s blockdevs
 that cannot be used because it cannot be used in a RAID set.
 Stratis will intensively manage raidsets, extending them across newly added
 blockdevs or creating new raidsets; and handling the removal of blockdevs
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset

.
 Stratis may use dm-raid’s reshape capabilities when possible, although
 this changes the stripe size and could cause issues.
\end_layout

\begin_layout Standard
Stratis cannot support redundancy with a single disk, but we may wish to
 reserve the small space for raid metadata and other uses even on one-disk
 Stratis pools.
 This will allow the pool to be made redundant (in the version when we support
 this) without encountering ugly edge cases.
\end_layout

\begin_layout Subsubsection
Cache Tier (optional)
\end_layout

\begin_layout Standard
If present, the Cache Tier sits directly underneath the Flex Layer.
 Its structure is similar to the lower levels of the Data Tier.
 See
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Cache-Tier"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for more.
\end_layout

\begin_layout Subsubsection
Layer 3: Flex
\end_layout

\begin_layout Standard
Whether blockdevs are part of raidsets or used directly, pools need to cope
 with the addition or removal 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset

 of them.
\end_layout

\begin_layout Standard
Stratis allows adding a blockdev to an existing pool, and using it to grow
 the pool's allocated space.
\end_layout

\begin_layout Standard
Removal of a blockdev involves calculating if a blockdev can be removed
 from the pool with no effect, removed with loss of redundancy, not removed
 without data loss, or if removal would be possible after a data movement
 and reorganization step.
 The data-movement capability could also be used in the case of a failing
 disk.
\end_layout

\begin_layout Standard
Marking a newly-added blockdev as ‘spare’ would keep it in reserve so a
 failing disk can be immediately removed and replaced without possibly exceeding
 total pool capacity in the interim.
\end_layout

\begin_layout Standard
The flexibility layer contains four linear DM devices made up of segments
 from lower-level devices.
 The first two devices will be used by Layer 4 (Thin Provisioning) as metadata
 and data devices.
 The flex layer will track what lower-level devices these are allocated
 from, and allow the two devices to grow as needed.
\end_layout

\begin_layout Standard
The third linear DM device is a spare metadata device to be used in the
 case that the metadata device requires offline repair.
 It will not usually be instantiated on the system, but guarantees there
 is room if needed.
 This device's size tracks the size of the metadata device, both as initially
 allocated, and as the metadata device is extended.
\end_layout

\begin_layout Standard
The fourth and final linear DM device is used for the Metadata Volume (MDV,
 see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Metadata-Volume-(MDV)"

\end_inset

).
 The MDV is used to store metadata about upper layers, layer five and above.
\end_layout

\begin_layout Standard
All devices in this layer may be built on L0, L1, or L2 devices, depending
 on configuration.
\end_layout

\begin_layout Standard
The initial sizes of all flex layer devices should be chosen to allow an
 entire pool to fit within a single blockdev of the minimum size (1 GiB).
\end_layout

\begin_layout Subsubsection
Layer 4: Thin Provisioning
\end_layout

\begin_layout Standard
The two linear targets from L3 are used as metadata device and data device
 for a DM thinpool device.
 The thinpool device implements a copy-on-write (CoW) algorithm, so that
 blocks in the data device are only allocated as needed to back the thin
 volumes created from the thinpool.
\end_layout

\begin_layout Standard
Stratis manages the thinpool device by extending the two L3 subdevices when
 either runs low on available blocks.
 If the pool approaches a point where the pool no longer has empty lower-level
 space to extend onto, Stratis alerts the user and takes action to avoid
 data corruption.
 Actions could include switching filesystems to read-only mode, running
 fstrim, or progressively throttling writes.
\end_layout

\begin_layout Subsubsection
Layer 5: Thin Volumes
\end_layout

\begin_layout Standard
Stratis creates thin volumes from the thin pool.
 It will automatically give a new volume a default size, format it with
 a filesystem, and make it available to the user.
\end_layout

\begin_layout Standard
Stratis also enables creating a new volume as a read/write snapshot of an
 existing volume.
 Although the underlying implementation does not require maintaining the
 relation between a snapshot and its origin, Stratis records this relation
 in its metadata.
 This relation may be of use to users who may, for example, use snapshots
 for backups and may make use of the origin information to identify a particular
 backup snapshot to restore from.
\end_layout

\begin_layout Subsubsection
Layer 6: Encryption (optional)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
in a future version
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Stratis may eventually enable per-filesystem encryption between the thin
 device and the filesystem.
\end_layout

\begin_layout Subsubsection
Layer 7: Filesystem
\end_layout

\begin_layout Standard
Stratis monitors each filesystem’s usage against its capacity and automatically
 extends them online without user intervention.
 Extending involves changing the thin dev's logical size, and then using
 a tool such as xfs_growfs to grow the filesystem.
 Stratis also periodically will run fstrim to reclaim unused space during
 idle periods.
 Idle periods will be found based upon current and historical system I/O
 activity levels.
\end_layout

\begin_layout Subsection
Data Tier Metadata
\end_layout

\begin_layout Standard
Stratis must track the blockdevs that make up the data tier of the pool
 (L0), integrity parameters (L1), the raidsets that are created from the
 data blockdevs (L2), the three linear targets that span the L2 devices
 (L3), the thinpool device (L4) and the attributes of the thin devices (L5)
 and filesystems created from the thinpool (L7).
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
Uniquely identify a blockdev as used by Stratis, which pool it is a member
 of, and parameters needed to recreate all layers
\end_layout

\begin_layout Enumerate
Detect incomplete or corrupted metadata and recover via second copy
\end_layout

\begin_layout Enumerate
Allow for blockdevs being expanded underneath Stratis
\end_layout

\begin_layout Enumerate
Redundant on each blockdev to tolerate unreadable sectors
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Recovery from accidental start-of-blockdev overwrite by placing a second
 copy at the end of the disk was also considered, but raised other issues
 that outweighed its benefit.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Redundant across blockdevs to handle missing or damaged members.
 Can provide metadata of missing blockdevs
\end_layout

\begin_layout Enumerate
Handle thousand+ blockdevs in a pool
\end_layout

\begin_layout Enumerate
Handle million+ filesystems in a pool and updates without writing to each
 blockdev
\end_layout

\begin_layout Enumerate
Extensible/upgradable metadata format
\end_layout

\begin_layout Subsubsection
Conventions
\end_layout

\begin_layout Standard
Sectors are 512 bytes in length
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Historically this is the minimum storage unit of a hard drive.
 Many Linux kernel APIs assume this value is constant (as does this document),
 and use another term such as 'block size' for dealing with cases where
 the minimum storage unit is different.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
All UUIDs are written as un-hyphenated ASCII encodings of their lower-case
 hexadecimal representation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
UUIDs are 128-bit values and therefore require only 16 bytes to represent
 their numeric value.
 However, since each ASCII value requires a byte, and the hexadecimal representa
tion of an 128-bit value requires 32 hexadecimal digits, the chosen encoding
 requires 32 bytes.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Design Overview
\end_layout

\begin_layout Standard
Stratis metadata is in three places:
\end_layout

\begin_layout Enumerate
Blockdev Data Area (BDA)
\end_layout

\begin_deeper
\begin_layout Enumerate
Signature Block within Static Header
\end_layout

\begin_layout Enumerate
Metadata Area (MDA)
\end_layout

\end_deeper
\begin_layout Enumerate
Metadata Volume (MDV)
\end_layout

\begin_layout Standard
(Specific DM targets such as raid, integrity, and thinpool also place their
 own metadata on disk.)
\end_layout

\begin_layout Standard
Information on levels 0-4 is duplicated across all blockdevs within a on-disk
 metadata format called the Blockdev Data Area (BDA).
 The BDA consists of a binary Signature Block, and the Metadata Area (MDA),
 which stores information in a text-based JSON format.
 Both the binary and text-based portions of the BDA define redundancy and
 integrity-checking measures.
\end_layout

\begin_layout Standard
The Metadata Volume (MDV) stores metadata on Layers 5 and up in a conventional
 block device and filesystem that is part of the Flex layer.
 Choosing to split overall metadata storage into two schemes allows upper
 layers' metadata to be free of limitations that would apply if a single
 scheme was used.
 For example, on-disk metadata formats find it hard to support runtime size
 extension, may keep redundant copies to ensure reliability, and aggressively
 check for corruption.
 This can work well with small amounts of data that is infrequently changed,
 but has trouble as data grows, or we wish to do updates in-place.
\end_layout

\begin_layout Standard
Upper-level metadata can achieve redundancy and integrity by building on
 the pre-existing lower layers, and work under looser restrictions around
 updating in place, and the total size to which it may grow.
 It can reuse an existing, well-tested solution for solving data organization
 and storage issues – a general-purpose filesystem.
 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
It would also be possible to store lower-level metadata on a /boot partition.
 This would still enable Stratis to be used for the root and other core
 filesystems, but would prevent /boot from being 
\emph on
in
\emph default
 Stratis.
 This has to be weighed against the work required to define a new on-disk
 metadata format.
 Our hope is that the split-metadata design allows the on-disk metadata
 format's implementation to be easy enough that we can avoid the dependency
 on a non-Stratis /boot partition.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
BlockDev Data Area (BDA)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename stratis-bda.svg
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
BDA format
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The BDA consists of a fixed-length Static Header of sixteen sectors, which
 contains two copies of the Signature Block; and the metadata area (MDA),
 whose length is specified in the Signature Block.
 These are written to the beginning of the blockdev as described below.
\end_layout

\begin_layout Standard
Stratis reserves the first 16 sectors of each blockdev for the Static Header.
 When initializing or modifying the Signature Block, identical data is written
 to locations 1 and 2.
\end_layout

\begin_layout Standard

\emph on
Static Header
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (sectors)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
contents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signature Block location 1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signature Block location 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Signature Block
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="60col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
byte offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (bytes)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEEE CRC32C of signature block (bytes at offset 4 length 508)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stratis signature: '!Stra0tis
\backslash
x86
\backslash
xff
\backslash
x02^
\backslash
x41rh'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Device size in 512-byte sectors (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UUID of the Stratis pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UUID of the blockdev
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
96
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector length of blockdev metadata area (MDA) (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
104
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sector length of reserved space (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
112
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flags (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
120
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
initialization time: UNIX timestamp (seconds since Jan 1 1970) using UTC
 (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
384
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
No flags are yet defined, so 'flags' field is zeroed.
\end_layout

\begin_layout Itemize
All 'unused' fields are zeroed, and are reserved for future use.
\end_layout

\begin_layout Itemize
If not zero, blockdev metadata area length (offset 96) must be a number
 divisible by four of at least 2032.
\end_layout

\begin_layout Itemize
The BDA is followed immediately by 
\emph on
reserved space
\emph default
, whose size is specified in the signature block (offset 104).
\end_layout

\begin_layout Itemize
Minimum length of BDA (static header and MDA) plus Reserved Space is 2048
 sectors (1 MiB).
\end_layout

\begin_layout Itemize
When a blockdev is removed from a pool, or is part of a pool that is destroyed,
 Stratis wipes the Static Header.
\end_layout

\begin_layout Itemize
The purpose of the unused sectors is twofold.
 First, placing the Signature Block copy locations in two separate 4K blocks
 helps to prevent a single bad write operation on 4K-block disks from corrupting
 both copies.
 Second, using a single sector for the Signature Block helps to minimize
 the likelihood of corruption on disks with 512 byte blocks.
\end_layout

\begin_layout Itemize
Each time that Stratis writes one or both Signature Block locations, it
 also zeroes the unused sectors that share the same 4K block.
\end_layout

\begin_layout Standard
The MDA is divided into four equal-size regions, numbered 0-3.
 When updating metadata, identical data is written to either the odd (1
 and 3) or even (0 and 2) regions, chosen by examining the timestamps and
 overwriting the older of two pairs.
\end_layout

\begin_layout Standard
Each MDA region's update consists of a fixed-length MDA Region Header, followed
 by variable-length JSON data.
\end_layout

\begin_layout Standard

\emph on
MDA Region Header
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="60col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
byte offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length (bytes)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEEE CRC32 covering remainder of MDA header
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEEE CRC32 covering JSON data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length of JSON data in bytes (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNIX timestamp (seconds since Jan 1 1970) using UTC (u64)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nanoseconds (u32)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
variable
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Metadata updates write to the older of the odd or even MDA regions.
 This is determined by lowest timestamp, and then lowest nanoseconds if
 timestamps are equal.
\end_layout

\begin_layout Itemize
MDA updates include the MDA Header, which includes the current time.
 However, if using the current time would not result in the update having
 the latest time across all MDA regions on all blockdevs in the pool, instead
 use a time of one nanosecond later than the latest MDA region time across
 all blockdevs.
\end_layout

\begin_layout Itemize
The procedure for updating metadata is:
\end_layout

\begin_deeper
\begin_layout Enumerate
Determine which regions in the MDA to use (odd or even) as described above.
\end_layout

\begin_layout Enumerate
Write MDA header and JSON data to the first MDA region (0 or 1)
\end_layout

\begin_layout Enumerate
Perform a Flush/FUA
\end_layout

\begin_layout Enumerate
Write MDA header and JSON data to the second MDA region (2 or 3)
\end_layout

\begin_layout Enumerate
Perform a Flush/FUA
\end_layout

\begin_layout Enumerate
Repeat for additional blockdevs.
 Also see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:The-MDA-and"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Multiple blockdevs being updated with the same metadata must write identical
 data to each MDA region, but which regions (odd or even) is used may vary,
 if the blockdevs have received differing numbers of metadata updates over
 time.
\end_layout

\begin_layout Subsubsection
Metadata Area (MDA)
\end_layout

\begin_layout Standard
The MDA contains a JSON object that represents the pool's overall configuration
 of blockdevs, from L0 to L4.
 See Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:JSON-Schema-for"

\end_inset

 for the formal JSON schema.
\end_layout

\begin_layout Description
Top
\begin_inset space \space{}
\end_inset

level
\begin_inset space \space{}
\end_inset

objects:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="45col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the name of the pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
data_tier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the data-tier block devices in the pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cache_tier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the cache-tier block devices in the pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flex_devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layout of the data and metadata linear devices
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thinpool_dev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
parameters of the thinpool device
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
data_tier: Tracks information specific to the data tier.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="45col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
block_devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of the
\series bold
block_dev
\series default
 objects that make up the tier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integrity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TBD settings and mappings associated with integrity support
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
raid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
object
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TBD settings and mappings associated with redundancy (RAID) support
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
integrity: (TBD) Settings and mappings associated with integrity support.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="45col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of
\series bold
layered_dev
\series default
 objects needed for integrity support
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tbd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tbd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tbd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other settings as needed to support integrity layer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
raid: (TBD) Settings and mappings associated with redundancy support.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="45col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of
\series bold
layered_dev
\series default
 objects needed for RAID support
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tbd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tbd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tbd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other settings as needed to support raid layer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
cache_tier: Tracks information specific to the data tier.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="45col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
block_devs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of the
\series bold
block_dev
\series default
 objects that make up the tier
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
block_dev: An object describing a physical block device:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
uuid
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The UUID of the block device, as recorded in its Signature Block
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
user_info
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
user-provided information for tracking the device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hardware_info
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
uniquely identifying information for the blockdev, such as SCSI VPD83 or
 serial number
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
flex_devs: an object with four keys that define the linear segments that
 make up each device in the Flex layer:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="55col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
meta_dev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of the
\series bold
layered_dev
\series default
 objects that make up the metadata volume (MDV)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thin_meta_dev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of the
\series bold
layered_dev
\series default
 objects that make up the thin metadata device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thin_meta_dev_spare
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of the
\series bold
layered_dev
\series default
 objects that make up the thin metadata spare device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thin_data_dev
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
an array of the
\series bold
layered_dev
\series default
 objects that make up the thin data device
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
layered_dev: An object describing a layered device segment:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
parent
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UUID of the lower-layered device the segment is created from
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the starting sector offset within the parent device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the length in sectors of the segment
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
thinpool_dev: an object with the following structure:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="40col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JSON type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
data_block_size
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
integer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the size in sectors of the thinpool data block
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Metadata-Volume-(MDV)"

\end_inset

Metadata Volume (MDV)
\end_layout

\begin_layout Standard
The Metadata Volume is formatted with an XFS filesystem that is used by
 Stratis to store information on user-created thin filesystems (L5-L7).
 This information is stored in the filesystem in a TBD format, maybe either
 an individual file-based scheme, or SQLite database.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:The-MDA-and"

\end_inset

The MDA and Very Large Pools
\end_layout

\begin_layout Standard
Stratis pools with very large numbers of blockdevs will encounter two issues.
 First, updating the metadata on all blockdevs in the pool may become a
 performance bottleneck.
 Second, the default MDA size may become inadequate to contain the information
 required.
\end_layout

\begin_layout Standard
To solve the first issue, Stratis caps the number of blockdevs that receive
 updated metadata information.
 A reasonable value for this cap might be in the range of 6 to 10, and should
 try to spread metadata updates across path-independent blockdevs, if this
 can be discerned, or randomly.
 This limits excessive I/O when blockdevs are added or removed from the
 pool, but maximizes the likelihood that up-to-date pool metadata is retrievable
 in case of failure.
\end_layout

\begin_layout Standard
To solve the second issue, Stratis monitors how large its most recent serialized
 metadata updates are, and increases the size of MDA areas on newly added
 devices when a fairly low threshold – %50 – is reached in comparison to
 the available MDA region size.
 This ensures that by the time sufficient blockdevs have been added to the
 pool to be in danger of serialized JSON data being too large, there are
 enough blockdevs with enlarged MDA space that they can be used for MDA
 writes.
\end_layout

\begin_layout Subsubsection
Metadata and Recovery
\end_layout

\begin_layout Standard
Bad things happen.
\end_layout

\begin_layout Standard
In order to recover from disk errors, Stratis uses CRCs over the critical
 L0-L4 metadata, and writes duplicate copies to a single blockdev, as well
 as across multiple blockdevs, when possible.
 It takes this approach – copies – rather than a mechanism that might make
 it possible to partially repair corrupted metadata for three reasons:
\end_layout

\begin_layout Enumerate
This metadata is relatively small – it concerns disks and raidsets, of which
 the pool will have only a small number, so having multiple entire copies
 isn't terribly wasteful.
\end_layout

\begin_layout Enumerate
Partially reconstructed information has limited value.
 This is due to the layered nature of Stratis.
 It's not sufficient to know some subset of the device mapping levels.
 Since they are layered, recovering e.g.
 L0-L2 layouts allows no data to be recovered without also knowing how L3
 and L4 are mapped on top, and vice versa.
\end_layout

\begin_layout Enumerate
L0-L4 metadata should require relatively few updates per day, since the
 changes it would reflect are blockdevs being added/removed from the pool,
 or thinpool data device expansions.
 Infrequent updates reduces the likelihood of corruption
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
citation needed?
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
L5-L7 is stored on the Metadata Volume on an XFS filesystem.
 Partial data recovery of that information is possible.
\end_layout

\begin_layout Standard
In addition to Stratis-specific metadata, device-mapper layers such as cache,
 raid, thin, as well as XFS filesystems, all have their own metadata.
 Stratis would rely on running each of their specific repair/fsck tools
 in case they reported errors.
\end_layout

\begin_layout Subsection
Cache Tier
\begin_inset CommandInset label
LatexCommand label
name "subsec:Cache-Tier"

\end_inset


\end_layout

\begin_layout Standard
The Cache Tier is a secondary optional stack that, if present, sits underneath
 the Flex Layer, and above the
\end_layout

\begin_layout Subsubsection
Requirements
\end_layout

\begin_layout Enumerate
Caching may be configured for redundancy, or no redundancy.
\end_layout

\begin_layout Enumerate
Caching may be configured for write-back and write-through modes.
\end_layout

\begin_layout Enumerate
Stratis concatenates all cache blockdevs and uses the resulting device to
 cache the thinpool device (L4).
 This lets all filesystems benefit from the cache.
\end_layout

\begin_layout Enumerate
Cache blocksize should match thinpool datablock size.
\end_layout

\begin_layout Enumerate
Removing cache tier comes with performance hit and “rewarming” phase 
\end_layout

\begin_layout Enumerate
For write-back caching, Cache tier must be redundant if data tier is redundant.
\end_layout

\begin_layout Subsection
Cache Tier Metadata
\end_layout

\begin_layout Subsubsection
Cache Tier Metadata Requirements
\end_layout

\begin_layout Enumerate
Identify all blockdevs that are part of the pool's cache tier, the configured
 redundancy level, and other cache-specific configuration parameters (e.g.
 WT/WB, block size, cache policy)
\end_layout

\begin_layout Enumerate
Cache tier supports up to 8 devices.
\end_layout

\begin_layout Section
Implementation Details
\end_layout

\begin_layout Subsection
'stratis' command-line tool
\end_layout

\begin_layout Standard
Stratis' command-line tool is currently written in Python.
 Since this is only used after the system is booted by the adminstrator,
 Python's interpreted nature and overhead is not a concern.
\end_layout

\begin_layout Subsection
stratisd
\end_layout

\begin_layout Standard
Stratisd needs to be implemented in a compiled language, in order to meet
 the requirement that it operate in a preboot environment.
 A small runtime memory footprint is also important.
\end_layout

\begin_layout Standard
stratisd is written in 
\begin_inset CommandInset href
LatexCommand href
name "Rust"
target "https://www.rust-lang.org/en-US/"
literal "false"

\end_inset

.
 The key features of Rust that make it a good choice for stratisd are:
\end_layout

\begin_layout Itemize
Compiled with minimal runtime (no GC)
\end_layout

\begin_layout Itemize
Memory safety, speed, and concurrency
\end_layout

\begin_layout Itemize
Strong stdlib, including collections
\end_layout

\begin_layout Itemize
Error handling
\end_layout

\begin_layout Itemize
Libraries available for DBus, device-mapper, JSON serialization, and CRC
\end_layout

\begin_layout Itemize
FFI to C libs if needed
\end_layout

\begin_layout Itemize
Will be available on RHEL 7 in delivery timeframe; currently packaged in
 Fedora
\end_layout

\begin_layout Standard
Other alternatives considered were C and C++.
 Rust was preferred over them for increased memory safety and productivity
 reasons.
\end_layout

\begin_layout Subsection
device-mapper names
\end_layout

\begin_layout Standard
If stratisd terminates unexpectedly and is restarted, it needs to rebuild
 its knowledge of the running system.
 This includes not only re-enumerating blockdevs to find Stratis pool members,
 but also determining the current state of the device-mapper targets that
 make up pools.
 A restarting stratisd needs to handle if none, some, or all of the expected
 DM devices are present, and if present DM devices are working correctly,
 or in an error state.
\end_layout

\begin_layout Standard
To these ends, Stratis uses consistent naming for device-mapper targets.
 This lets stratisd more easily determine if DM devices already exist, and
 avoids leaking old DM mappings.
\end_layout

\begin_layout Subsubsection
Naming convention Requirements
\end_layout

\begin_layout Itemize
Globally unique
\end_layout

\begin_layout Itemize
Maximum 127 characters
\end_layout

\begin_layout Itemize
Differentiate between Stratis and other DM devices
\end_layout

\begin_layout Itemize
Forward-compatible to allow Stratisd updates
\end_layout

\begin_layout Itemize
Human-readable
\end_layout

\begin_layout Itemize
Easily parsable
\end_layout

\begin_layout Subsubsection
Naming Convention
\end_layout

\begin_layout Standard
Stratis DM names consist of five required and two optional parts, separated
 by a '-'.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="10col%">
<column alignment="center" valignment="top" width="60col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
stratis-id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universal DM differentiator: 'stratis'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
format-version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Naming convention version: '1'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
private
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optional indicator 'private'
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pool-id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASCII hex UUID of the associated pool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of the Stratis layer this device is in
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of the role of the device within the layer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
role-unique-id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Role-specific unique differentiator between multiple devices within the
 layer with the same role
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The maximum length (adding 6 '-'s as separator) is 125, to stay within the
 DM name limit of 127 characters.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

private
\begin_inset Quotes erd
\end_inset

 is included in names for DM devices that are internal and that should be
 excluded from content scanning by tools such as blkid.
\end_layout

\begin_layout Itemize
Characters for each part are drawn solely from the character classes '[a-z]'
 and '[0-9]' except that part 7 may also use the '-' character.
 These restrictions meet D-Bus and udev requirements
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See libdm/libdm-common.c _is_whitelisted_char() in the lvm2 code for more.
\end_layout

\end_inset

.)
\end_layout

\begin_layout Subsubsection
Per-Layer Naming Definitions
\end_layout

\begin_layout Subsubsection*
Layer 0: Blockdev
\end_layout

\begin_layout Standard
Not needed.
\end_layout

\begin_layout Subsubsection*
Layer 1: Integrity
\end_layout

\begin_layout Standard
TBD
\end_layout

\begin_layout Subsubsection*
Layer 2: Redundancy
\end_layout

\begin_layout Standard
TBD
\end_layout

\begin_layout Subsubsection*
Layer 3: Flex
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Private
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
role-unique-id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thinmeta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(none)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear device for thinpool metadata
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thindata
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(none)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear device for thinpool data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mdv
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(none)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linear device for Metadata Volume (MDV)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Description
Example: stratis-1-private-2836fca3047bba22938475638abcd840-flex-thinmeta
\end_layout

\begin_layout Subsubsection*
Layer 4: Thinpool
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Private
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
role-unique-id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thinpool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(none)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thinpool device
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Description
Example: stratis-1-private-2836fca3047bba22938475638abcd840-thinpool-pool
\end_layout

\begin_layout Subsubsection*
Layer 5: Thin volume
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Private
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
layer-role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
role-unique-id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
thin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-char ASCII hex fs UUID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thin volume
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Description
Example: stratis-1-2836fca3047bba22938475638abcd840-thin-fs-ca7efca3047bba229384
75638abc3141
\end_layout

\begin_layout Subsubsection*
Layer 6: Encryption
\end_layout

\begin_layout Standard
TBD
\end_layout

\begin_layout Subsection
device-mapper minimum version
\end_layout

\begin_layout Standard
Stratisd device-mapper minor version 37 or greater, for DM event poll()
 support and support for event_nr in list_devices ioctl.
\end_layout

\begin_layout Subsection
OS Integration: Boot and initrd
\end_layout

\begin_layout Standard
Since we want to allow Stratis to be used for system files, Stratis needs
 to run in the initrd preboot environment.
 This allows it to activate pools and filesystems so that they can be mounted
 and accessible during the transition to the main phase of operation.
\end_layout

\begin_layout Standard
The use of D-Bus is not possible in the preboot environment.
 Therefore, Stratis must tolerate its absence.
\end_layout

\begin_layout Standard
The most likely implementation of these requirements is a 
\begin_inset Quotes eld
\end_inset

boot-init
\begin_inset Quotes erd
\end_inset

 mode for Stratis, in which it discovers blockdevs and activates pools,
 but does not connect to D-Bus, and then exits.
 Then, as part of the systems main phase, Stratis will run again and stay
 running, in order to handle pool monitoring and commands over D-Bus, as
 normal.
\end_layout

\begin_layout Subsection
OS Integration: udev
\end_layout

\begin_layout Standard
The udev library 
\begin_inset Quotes eld
\end_inset

libudev
\begin_inset Quotes erd
\end_inset

 enables access to the udev device database.
 This allows library users to enumerate block devices on the system, and
 includes attributes describing their contents, such as what filesystem
 or volume manager signature was detected.
 (libudev uses libblkid for this, which recently had Stratis signature support
 added.) The primary benefit of this is to perform the time-consuming block
 device scan only once, and to alleviate library users from interpreting
 block device contents.
\end_layout

\begin_layout Standard
On boot, Stratis uses libudev to enumerate Stratis block devices on the
 system, reads the Stratis metadata from each, and activates pools that
 are complete.
 Later, during the main running phase, Stratis monitors udev events for
 newly-added block devices, so that if missing Stratis pool members are
 connected to complete a pool, the pool can be activated and used.
\end_layout

\begin_layout Subsection
OS Integration: /dev entries
\end_layout

\begin_layout Standard
Stratis allows the user to create filesystems, which then can be mounted
 and used via mount(8) and the fstab(5).
 Stratisd creates a /dev/stratis directory.
 It creates /dev/stratis/<poolname> for each pool present on the system,
 and /dev/stratis/<poolname>/<filesystemname> for each filesystem within
 the pool.
 Changes such as creations, removals, and renames are reflected in the entries
 under /dev/stratis.
 These entries give the user a well-known path to a device to use for mounting
 the Stratis filesystem.
\end_layout

\begin_layout Subsection
Partial Pool Activation
\end_layout

\begin_layout Standard
Stratis must handle if some blockdevs that make up a pool are not present.
 Its initial policy is not to activate a pool until all members are present.
 However, there are scenarios where this may not be strictly necessary,
 such as a blockdev that has not had any Flex Layer allocations on it, or
 (in Stratis 2.0) if redundancy allows the RAID Layer to function in a degraded
 state.
 The initial policy will likely be modified over the course of development
 to accommodate these cases.
\end_layout

\begin_layout Subsection
Snapshots
\end_layout

\begin_layout Standard
Stratis's current snapshot implementation is characterized by a few traits:
\end_layout

\begin_layout Itemize
A snapshot and its origin are not linked in lifetime.
 i.e.
 a snapshotted filesystem may live longer than the filesystem it was created
 from.
\end_layout

\begin_layout Itemize
A snapshot of a filesystem is another filesystem.
\end_layout

\begin_layout Itemize
A filesystem may be snapshotted while it is mounted or unmounted.
\end_layout

\begin_layout Itemize
Each snapshot uses around half a gigabyte of actual backing storage, which
 is needed for the XFS filesystem's log.
\end_layout

\begin_layout Standard
These may change in the future.
\end_layout

\begin_layout Subsection
Backstore Internals
\end_layout

\begin_layout Standard
The backstore is divided into two tiers: the data tier, and an optional
 cache tier.
 Each tier has its own set of physical block devices.
 The goal of each tier is to provide a linear device that the flex layer
 (or another tier) can build on top of.
\end_layout

\begin_layout Standard
A tier is created with a certain feature set, which results in an internal
 layering of devices as needed to support those features.
 Features such as redundancy, integrity, and dedupe/compression.
 The features a tier supports are fixed at tier creation time.
 However, the block devices that make up the tier may change.
 A blockdev may increase in capacity, or new blockdevs may be added.
\end_layout

\begin_layout Standard
This requires each tier to support:
\end_layout

\begin_layout Itemize
Today
\end_layout

\begin_deeper
\begin_layout Itemize
add_blockdev (add a new blockdev to the tier)
\end_layout

\begin_layout Itemize
blockdevs (list/iterate)
\end_layout

\end_deeper
\begin_layout Itemize
Near Future
\end_layout

\begin_deeper
\begin_layout Itemize
extend_blockdev (start using added space on a blockdev that has become larger)
\end_layout

\end_deeper
\begin_layout Itemize
Far future
\end_layout

\begin_deeper
\begin_layout Itemize
prepare_to_remove_blockdev (move data off a blockdev in preparation for
 its removal, if space is available elsewhere)
\end_layout

\begin_layout Itemize
remove_blockdev (remove a blockdev that has no data on it)
\end_layout

\end_deeper
\begin_layout Standard
The tier includes internal support for multiple features, which also are
 implemented using DM devices.
\end_layout

\begin_layout Standard
At the
\begin_inset Quotes eld
\end_inset

bottom
\begin_inset Quotes erd
\end_inset

 of the tier are blockdevs.
 These blockdevs are mapped through layers that add value, such as integrity
 or compression.
\end_layout

\begin_layout Standard
The result is each layer takes a list of blockdevs and converts it to a
 list of
\begin_inset Quotes eld
\end_inset

better
\begin_inset Quotes erd
\end_inset

 blockdevs, whose total size is likely different.
 (Integrity and raid will be smaller, vdo will present a single much larger
 block device.)
\end_layout

\begin_layout Standard
While each layer accepts an array of blockdevs, the
\begin_inset Quotes eld
\end_inset

top
\begin_inset Quotes erd
\end_inset

 of the tier presents a single linear
\begin_inset Quotes eld
\end_inset

unitary blockdev
\begin_inset Quotes erd
\end_inset

 that maintains the location of each presented block and never shrinks.
\end_layout

\begin_layout Standard
The ordering of layers (from bottom to top) within a tier is:
\end_layout

\begin_layout Enumerate
blockdevs
\begin_inset Newline newline
\end_inset

Blockdevs supply available space to the tier.
 Blockdevs may grow, for example if they happen to be further virtualized
 on top of a storage appliance, Amazon EBS, or Ceph block storage.
\end_layout

\begin_layout Enumerate
integrity
\begin_inset Newline newline
\end_inset

When integrity=true, each blockdev's usable space is mapped to the dm-integrity
 target, which will slightly reduce usable space, and cause a performance
 hit, in order to detect corruption on reads.
 It is believed that integrity devices cannot change size.
 Therefore, extending a blockdev may require a second dm-integrity device
 be created.
\end_layout

\begin_layout Enumerate
raid
\begin_inset Newline newline
\end_inset

when raid=true, Stratis uses the dm-raid target to create software RAID
 in top of the devices presented to it (These may be either
\begin_inset Quotes eld
\end_inset

raw
\begin_inset Quotes erd
\end_inset

 blockdevs or integrity-enabled blockdevs.) In order to maximize flexibility,
 Stratis creates multiple raidsets by defining a maximum for each raid member's
 size, as well as the number of members in a raidset.
 It also may choose a raid member size smaller than the maximum, in order
 to ensure between 4-8 raidsets are created.
\begin_inset Newline newline
\end_inset

if additional block resources are made available, the raid layer constructs
 additional raidsets (if possible).
\end_layout

\begin_layout Enumerate
vdo
\begin_inset Newline newline
\end_inset

When vdo=true, the vdo layer will concatenate the blockdevs it is given
 (if needed) of any previously-mentioned type and create a single VDO device.
 Stratis must manage extending both the logical size (the top) as well as
 requesting additional space from lower layers to extend the physical size
 (the bottom) as needed.
\end_layout

\begin_layout Enumerate
unitary
\begin_inset Newline newline
\end_inset

If presented with more than one blockdev, the Unitary layer will ensure
 the Tier presents a single blockdev with consistent block mapping for use
 by upper layers by creating a Linear device that concatenates them.
\end_layout

\begin_layout Subsubsection
Demand-based allocations
\end_layout

\begin_layout Standard
Layers should consume the entire space available to them when constructing
 devices, but instead grow existing mapped allocations (or create new ones)
 as the total demands of upper layers grow larger.
 This is preferred over a
\begin_inset Quotes eld
\end_inset

greedy
\begin_inset Quotes erd
\end_inset

 because any mapping that is created and has data on it must be maintained
 for the life of the pool.
 There's no good way to tell when an existing device becomes used.
 Starting small and then growing allocations gives each layer a way to determine
 regions that can be reclaimed if needed.
\end_layout

\begin_layout Subsubsection
Layer API
\end_layout

\begin_layout Part
Development Plan
\end_layout

\begin_layout Section
Delivery of Features
\end_layout

\begin_layout Subsection
Stratis version 0.1
\end_layout

\begin_layout Standard
Simplest thing that does something useful
\end_layout

\begin_layout Enumerate
Create a pool
\end_layout

\begin_layout Enumerate
Destroy a pool
\end_layout

\begin_layout Enumerate
Create a filesystem
\end_layout

\begin_layout Enumerate
Destroy a filesystem
\end_layout

\begin_layout Enumerate
List filesystems
\end_layout

\begin_layout Enumerate
Rename filesystems
\end_layout

\begin_layout Enumerate
List pools
\end_layout

\begin_layout Enumerate
Rename pools
\end_layout

\begin_layout Enumerate
List blockdevs in a pool
\end_layout

\begin_layout Enumerate
Redundancy level: none
\end_layout

\begin_layout Enumerate
D-Bus API
\end_layout

\begin_layout Enumerate
Command-line tool
\end_layout

\begin_layout Enumerate
Save/restore configuration across reboot
\end_layout

\begin_layout Enumerate
Initial disk labeling and on-disk metadata format
\end_layout

\begin_layout Enumerate
Error handling for missing, corrupted, or duplicate blockdevs in a pool
\end_layout

\begin_layout Enumerate
thin/cache metadata validation/check (i.e.
 call thin_check & cache_check)
\end_layout

\begin_layout Subsection
Stratis version 0.5
\end_layout

\begin_layout Standard
Add cache tier & basic snapshot support
\end_layout

\begin_layout Enumerate
List cache blockdevs in a pool
\end_layout

\begin_layout Enumerate
Add cache blockdevs
\end_layout

\begin_layout Enumerate
Remove cache blockdevs
\end_layout

\begin_layout Enumerate
Write-through caching only
\end_layout

\begin_layout Enumerate
Create/destroy primary snapshots
\end_layout

\begin_layout Enumerate
Working D-Bus signals
\end_layout

\begin_layout Subsection
Stratis version 1.0
\end_layout

\begin_layout Standard
Minimum Viable Product
\end_layout

\begin_layout Enumerate
Snapshot management: auto snaps, date-based culling, “promotion” from snap
 to “primary”
\end_layout

\begin_layout Enumerate
Monitor pool(s) for getting close to capacity, and do something (remount
 ro?) if dangerously full
\end_layout

\begin_layout Enumerate
Notification method to the user if pool is approaching user or system-defined
 capacity
\end_layout

\begin_layout Enumerate
Maintain filesystems: Grow a filesystem as it nears capacity
\end_layout

\begin_layout Enumerate
Maintain filesystems: Run fstrim periodically to release unused areas back
 to thinpool
\end_layout

\begin_layout Enumerate
Add and use an additional blockdev
\end_layout

\begin_layout Subsection
Stratis version 2.0
\end_layout

\begin_layout Standard
Add Redundancy Support
\end_layout

\begin_layout Enumerate
Remove an existing blockdev
\end_layout

\begin_layout Enumerate
Redundancy level: raid1
\end_layout

\begin_layout Enumerate
Redundancy level: raid5
\end_layout

\begin_layout Enumerate
Redundancy level: raid6
\end_layout

\begin_layout Enumerate
Redundancy level: raid10
\end_layout

\begin_layout Enumerate
Cache redundancy level: raid1
\end_layout

\begin_layout Enumerate
Write-through caching enabled
\end_layout

\begin_layout Enumerate
Quotas
\end_layout

\begin_layout Enumerate
Blockdev resize (larger)
\end_layout

\begin_layout Enumerate
Spares
\end_layout

\begin_layout Subsection
Stratis version 3.0
\end_layout

\begin_layout Standard
Rough ZFS feature parity.
 New DM features needed.
\end_layout

\begin_layout Enumerate
Send/Receive
\end_layout

\begin_layout Enumerate
Integrity checking (w/ self-healing only if on raid)
\end_layout

\begin_layout Enumerate
Raid scrub
\end_layout

\begin_layout Enumerate
Compression
\end_layout

\begin_layout Enumerate
Encryption
\end_layout

\begin_layout Enumerate
Dedupe
\end_layout

\begin_layout Enumerate
Raid write log (on ssd? To eliminate raid write hole)
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Stratis-version-4.0"

\end_inset

Stratis version 4.0
\end_layout

\begin_layout Standard
Future features and evolution
\end_layout

\begin_layout Enumerate
Change a pool’s redundancy level
\end_layout

\begin_layout Enumerate
Boot from a filesystem
\end_layout

\begin_layout Enumerate
Libstoragemgmt integration
\end_layout

\begin_layout Enumerate
Multipath integration
\end_layout

\begin_layout Enumerate
Tag-based blockdev and filesystem classification/grouping
\end_layout

\begin_layout Enumerate
Mirroring across partitions within a pool, for multi-site or across hw failure
 domains (shelves/racks)
\end_layout

\begin_layout Enumerate
Support for byte-addressible persistent memory
\end_layout

\begin_layout Section
Schedule
\end_layout

\begin_layout Standard
Very tentative: 0.1 1H 2017, 0.5 2H 2017, 1.0 1H 2018.
\end_layout

\begin_layout Section
Open Questions
\end_layout

\begin_layout Paragraph
Initial filesystem sizing.
\end_layout

\begin_layout Standard
Mkfs does different things depending on the size of the blockdev.
 If it’s small then things will be suboptimal if we grow it substantially.
 Weigh this against too large, which would waste thinpool space (mkfs touches/al
locates more thin blocks).
\end_layout

\begin_layout Paragraph
Alignment and tuning of sizes across layers.
\end_layout

\begin_layout Standard
It would be great if the fs happens to write to a new location that allocates
 a thin block that it uses that entire block.
 Also, look at XFS allocation groups, they may work cross-purposes to thinpool
 by spreading files across the blkdev.
 Align as much as possible.
\end_layout

\begin_layout Paragraph
Behavior when thin pool is exhausted.
\end_layout

\begin_layout Standard
Slow down? Switch all fs to read-only?
\end_layout

\begin_layout Paragraph
Should we separate cache into read devs and write devs?
\end_layout

\begin_layout Standard
Write-back cache we may want to support redundancy (cache contains only
 copy of data until flush) whereas read cache redundancy serves little purpose,
 just reduces the total space available.
\end_layout

\begin_layout Paragraph
Being able to identify and differentiate blockdevs within a pool is very
 important, given how many there can be.
\end_layout

\begin_layout Standard
We should provide the user with system-generated info, and also allow the
 user to add their own descriptions of blockdevs.
\end_layout

\begin_layout Paragraph
Journald interactions
\end_layout

\begin_layout Paragraph
Nfs interactions
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
nocite{*}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "plain"

\end_inset


\end_layout

\begin_layout Part*
\start_of_appendix
Appendices
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:JSON-Schema-for"

\end_inset

JSON Schema for MDA
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status collapsed

\begin_layout Plain Layout

\size tiny
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "mda.schema.json"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Initial options for adapting existing solutions
\end_layout

\begin_layout Standard
As part of early requirements-gathering, the team looked at existing projects
 in this space, both as candidates for building upon to create a solution,
 as well as if an existing project could be extended to meet the requirements.
\end_layout

\begin_layout Subsection
Extending an existing project
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:SSM"

\end_inset

SSM
\end_layout

\begin_layout Standard
System Storage Manager (
\begin_inset CommandInset href
LatexCommand href
name "SSM"
target "https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/ch-ssm.html"
literal "false"

\end_inset

) provides a command line interface to manage storage in existing technologies.
 Our interest in SSM was to determine if it would be an existing project
 we could extend to meet our requirements.
\end_layout

\begin_layout Standard
SSM provides a unified interface for three different “backends”: LVM, Btrfs,
 and crypto.
 However, if we wish to provide a simple, unified experience, the first
 step would likely be to pick one of the backends and build around its capabilit
ies.
 This eliminates complexity from the CLI -- no need for the user to pick
 a backend or encounter commands that happen to not work based upon the
 chosen backend, but obviates much of the point of SSM.
\end_layout

\begin_layout Standard
SSM does not provide a programmatic API.
 It internally contains “ssmlib”, which could be enhanced and exposed, but
 would be Python-only.
 ssmlib is also built around executing command-line tools, which can cause
 issues.
\end_layout

\begin_layout Standard
SSM is not a daemon.
 We’d need to modify SSM to operate on a daemon model.
 An ongoing presence is needed for fault monitoring but also automatic filesyste
m and thinpool extensions.
\end_layout

\begin_layout Standard
SSM doesn't currently support RAID5/6, thin provisioning, or configuring
 a cache tier.
\end_layout

\begin_layout Standard
SSM is written in Python, which would limit its ability to be used in an
 early-boot environment.
\end_layout

\begin_layout Standard
SSM does not provide functionality for error recovery.
 If the storage stack encounters an error the user has to use the individual
 tools in the stack to correct.
 Thus greatly diminishing the ease of use aspect and value proposition of
 SSM.
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
Extending SSM does not meet the requirements.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:LVM2"

\end_inset

LVM2
\end_layout

\begin_layout Standard
Logical Volume Manager (
\begin_inset CommandInset href
LatexCommand href
name "LVM2"
target "https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)"
literal "false"

\end_inset

) is the nearly universally-used volume manager on Linux.
 It provides the 
\begin_inset Quotes eld
\end_inset

policy
\begin_inset Quotes erd
\end_inset

 that controls device-mapper.
 It adds:
\end_layout

\begin_layout Itemize
On-disk metadata format to save and restore configuration across boot
\end_layout

\begin_layout Itemize
Usage model built on Physical Volume, Volume Group, and Logical Volume (PV,
 VG, LV) concepts.
\end_layout

\begin_layout Itemize
A comprehensive set of command line tools for configuring linear, raid,
 thinpool, cache, and other device-mapper capabilities
\end_layout

\begin_layout Itemize
Monitoring, error handling, and recovery
\end_layout

\begin_layout Itemize
LV resize; PVs may be added or removed from a VG
\end_layout

\begin_layout Itemize
Snapshots and thin snapshots
\end_layout

\begin_layout Itemize
Choice of user-guided or automatic allocation/layout within the VG
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
Adding the capability to manage filesystems to LVM isn't something that
 has been much considered.
 Extending LVM2 would make it very hard to achieve simplicity of interface,
 given the conflicting requirement to maintain backwards compatibility with
 what LVM provides now.
\end_layout

\begin_layout Subsection
Building upon existing projects
\end_layout

\begin_layout Subsubsection
XFS
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "XFS"
target "https://en.wikipedia.org/wiki/XFS"
literal "false"

\end_inset

 is a highly respected non-volume-managing filesystem.
 To meet the goal of eliminating manual filesystem resizing by the user,
 Stratis requires the filesystem used have online resize (or at least online
 grow) capabilities, which XFS does.
 In the absence of online shrink, Stratis would rely on trim to reclaim
 space from an enlarged but mostly empty filesystem, and return it to the
 thin pool for use by other filesystems.
\end_layout

\begin_layout Standard
Use of XFS on top of thin provisioning also makes proper initial sizing
 important, as well as choosing sizes for XFS on-disk allocations that match
 those used by the underlying thin-provisioning layer, to ensure behavior
 with the two layers is optimal.
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
XFS meets the requirements and currently seems like the best choice.
\end_layout

\begin_layout Subsubsection
device-mapper
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "device-mapper"
target "https://en.wikipedia.org/wiki/Device_mapper"
literal "false"

\end_inset

 is a framework provided by the Linux kernel for creating enhanced-functionality
 block devices on top of physical block devices.
 These new devices can add support for RAID, thin provisioning, encryption,
 multipath devices, caching devices, and more.
 The framework provides the ability to configure and layer these capabilities,
 but no facilities for saving or restoring a configuration.
 device-mapper provides 
\begin_inset CommandInset href
LatexCommand href
name "mechanism, but no policy"
target "http://www.personal.kent.edu/~rmuhamma/OpSystems/Myos/mechanicPolicy.htm"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
Using devicmapper directly would require that an upper layer implement its
 own on-disk metadata format and handle some tasks in a similar manner to
 LVM2.
\end_layout

\begin_layout Subsubsection
LVM2
\end_layout

\begin_layout Standard
See 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:LVM2"

\end_inset

 for a description of LVM2 capabilities.
\end_layout

\begin_layout Standard
LVM is a mature software project that implements volume management.
 For Stratis, the question is whether the benefits of internally using LVM2
 outweigh the costs.
\end_layout

\begin_layout Subsubsection*
Issues with Building on LVM2
\end_layout

\begin_layout Standard
Note: This assumes the implementation described in Part 
\begin_inset CommandInset ref
LatexCommand ref
reference "part:Implementation"

\end_inset

.
\begin_inset Newline newline
\end_inset

Note: lvm-team has raised objections to items on this list.
\end_layout

\begin_layout Itemize
Policy+mechanism vs policy+policy+mechanism: LVM2 is configurable but has
 limitations.
 e.g.
 we might wish to let the user define a block device as only to be used
 to replace a failed disk in a raidset.
 However LVM raid_fault_policy=
\begin_inset Quotes erd
\end_inset

allocate
\begin_inset Quotes erd
\end_inset

 will use 
\emph on
any
\emph default
 free PV, not just one explicitly reserved.
\end_layout

\begin_layout Itemize
A good API needs the ability to convey meaningful and consistent errors
 for other applications to interpret.
 The lvm command line employs a simple exit code strategy.
 The error reason is embedded in stderr in free form text that changes without
 notice.
 Thus it is virtually impossible for any lvm command line wrapper to provide
 meaningful and consistent error codes other than success or failure.
 Note: Lvm has recently added JSON output which contains the ability to
 add more meaningful and useful error codes, but this functionality is not
 implemented and non-trivial in scope to complete.
\end_layout

\begin_layout Itemize
lvm-dbus cannot be used because it requires Python and D-Bus, neither of
 which are available in initrd
\end_layout

\begin_layout Itemize
Stratis-managed LVM2 devices would show up in LVM2 device & volume listings,
 which would cause user confusion
\end_layout

\begin_layout Itemize
Using LVM2 for metadata tracking is good, but only if upper layer has no
 metadata storage needs of its own.
 What about tags? Tags can't store JSON objects since '[]{},
\begin_inset Quotes erd
\end_inset

' are not allowed in tags.
\end_layout

\begin_layout Itemize
LVM2 metadata format prevents new metadata schemes, such as tracking thin
 volumes separately from PV metadata, or metadata backup copy not also at
 the tail of the blockdev.
\end_layout

\begin_layout Itemize
Use of new device-mapper features delayed by LVM2 implementation and release
 cycle.
\end_layout

\begin_layout Itemize
One big argument by LVM2 proponents is that LVM2 is a large, long-lived
 project that has learned many things the hard way, and it would be foolish
 to abandon all that value by starting over.
\end_layout

\begin_deeper
\begin_layout Itemize
Must we use the code, or can we take lessons from LVM2 devs and incorporate
 them independently? Maybe fix some things that backwards-compatibility
 makes impossible to fix in LVM2?
\end_layout

\begin_layout Itemize
Large parts of the codebase don't benefit Stratis:
\end_layout

\begin_deeper
\begin_layout Itemize
File-based & configurable Locking: not needed since everything is serialized
 through stratisd
\end_layout

\begin_layout Itemize
daemons/* including clvmd
\end_layout

\begin_layout Itemize
Udev: stratisd assumes udev & listens for udev events
\end_layout

\begin_layout Itemize
Filter/global_filter
\end_layout

\begin_layout Itemize
Caching: not needed, daemon is authoritative
\end_layout

\begin_layout Itemize
profiles
\end_layout

\begin_layout Itemize
preferred names ordering
\end_layout

\begin_layout Itemize
lvm.conf display settings: not needed, up to API client
\end_layout

\begin_layout Itemize
dev_manager: Stratis layers are predefined, much simpler
\end_layout

\begin_layout Itemize
config_tree
\end_layout

\begin_layout Itemize
report: beyond Stratis scope
\end_layout

\begin_layout Itemize
Command-line tools, option parsing: handled in cli, reduced in scope
\end_layout

\begin_layout Itemize
lib/misc/*: not needed or handled via libraries
\end_layout

\begin_layout Itemize
Multi-metadata-format support
\end_layout

\end_deeper
\begin_layout Itemize
What would Stratis benefit from?
\end_layout

\begin_deeper
\begin_layout Itemize
on-disk metadata format
\end_layout

\begin_layout Itemize
Best policy for duplicate/absent/corrupted block devices
\end_layout

\begin_layout Itemize
fault tolerance/recovery
\end_layout

\begin_layout Itemize
pool/snapshot monitoring
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection*
Analysis
\end_layout

\begin_layout Standard
While we cannot dismiss using LVM as an option for the future, currently
 there are some areas that it does not meet Stratis requirements.
 There are also questions about the best way to interface with LVM that
 need to be resolved prior to its adoption.
\end_layout

\begin_layout Subsection
Conclusions
\end_layout

\begin_layout Standard
Based on looking at the existing available building blocks, the best option
 is to build Stratis as a new project that initially makes use of XFS and
 device-mapper in its implementation.
 In parallel, request enhancements to LVM2 to enable its substitution for
 device-mapper when the enhancements are implemented.
 This lets Stratis proceed without delay to a point where it can be placed
 in prospective users' hands to start getting feedback, and will allow Stratis
 to eventually use LVM2, and avoid duplicating functionality that LVM2 already
 provides.
\end_layout

\end_body
\end_document
